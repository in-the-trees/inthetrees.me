---
import type { Microblog } from "~libs/microblog";
import DynamicTimestamp from "~components/microblog/dynamic-timestamp";
import transformImage from "~libs/mb-img-transform";
import { createRichLinks, createLegacyRichLinks } from "~libs/mb-rich-links";

interface Props {
   post: Microblog;
   inFeed?: boolean;
   lazyImages?: boolean;
}

const { post, inFeed, lazyImages } = Astro.props;

const [year, month, day] = post.date_published
   .split("T")[0]
   .split("-")
   .map(Number);

let contentHtml = post.content_html;
contentHtml = transformImage(
   post.content_html,
   post.photos,
   lazyImages ? "lazy" : undefined,
);
contentHtml = createRichLinks(contentHtml);
contentHtml = createLegacyRichLinks(contentHtml);

const nonRelativeDateOptions: Intl.DateTimeFormatOptions = {
   year: "numeric",
   month: "long",
   day: "numeric",
   hour: "2-digit",
   minute: "2-digit",
   hourCycle: "h23",
};
---

<style>
   header a {
      @apply text-black/[.72];
      @apply no-underline hover:underline;
   }
</style>

<article>
   {
      inFeed ?
         <header class="font-serif italic text-xs mb-4">
            <a href={`/microblog/${year}/${month}/${day}/${post.id}`}>
               <Fragment>
                  Posted{" "}
                  <time datetime={post.date_published}>
                     <DynamicTimestamp date={post.date_published} client:load />
                  </time>
               </Fragment>
               {post.date_modified &&
                  post.categories?.includes("show_updated") && (
                     <Fragment>
                        & updated
                        <DynamicTimestamp
                           date={post.date_modified}
                           client:load
                        />
                     </Fragment>
                  )}
            </a>
         </header>
      :  <header class="font-serif italic text-black/[.72] mb-4">
            Posted{" "}
            <time datetime={post.date_published}>
               {new Date(post.date_published.slice(0, -5)).toLocaleString(
                  "en-US",
                  nonRelativeDateOptions
               )}
               {post.date_modified &&
                  post.categories?.includes("show_updated") && (
                     <Fragment>
                        & updated{" "}
                        {new Date(
                           post.date_modified.slice(0, -5)
                        ).toLocaleString("en-US", nonRelativeDateOptions)}
                     </Fragment>
                  )}
            </time>
         </header>
   }
   <Fragment set:html={contentHtml} />
</article>
