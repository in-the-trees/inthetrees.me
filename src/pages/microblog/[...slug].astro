---
export const prerender = false;

import Layout from "~layouts/base.astro";
import "~styles/text.css";
import "~styles/reply.css";
import Back from "~components/back.astro";

import { getMicrodotblog, getPost, type Microblog } from "~libs/microblog";
import MicroblogPost from "~components/microblog/post.astro";
import { ReplyArea } from "~components/microblog/reply-area";

const { slug } = Astro.params;
const slugArray = slug && slug.length > 0 ? slug.split("/").filter(Boolean) : [];

let post: Microblog = {} as Microblog;

// check if slug length is valid
if (slugArray.length !== 4 && slugArray.length !== 1) {
   return new Response(null, { status: 404 });
}

if (slugArray.length === 1) {
   const postId = slugArray[0];

   // check if slug is a valid post id
   if (!/^\d{7}$/.test(postId)) return new Response(null, { status: 404 });

   try {
      post = await getPost(postId);
   } catch {
      return new Response(null, { status: 404 });
   }
}

if (slugArray.length === 4) {
   const [year, month, day, postId] = slugArray;

   // check if slug ends with a valid post id
   if (!/^\d{7}$/.test(postId)) return new Response(null, { status: 404 });

   // check if date is valid
   if (!/^\d{4}$/.test(year)) return new Response(null, { status: 404 });
   if (!/^(1[0-2]|[1-9])$/.test(month))
      return new Response(null, { status: 404 });
   if (!/^(3[01]|[12]\d|[1-9])$/.test(day))
      return new Response(null, { status: 404 });

   try {
      post = await getPost(postId, { year, month, day });
   } catch {
      return new Response(null, { status: 404 });
   }
}

const microdotblog: Microdotblog = await getMicrodotblog(post.url);
---

<Layout>
   <header slot="header" class="leading-none">
      <Back href="/microblog" text="microblog" />
   </header>

   <MicroblogPost post={post} />

   <section id="reply-area">
      <ReplyArea
         postUrl={post.url}
         initialMicrodotblog={microdotblog}
         client:load
      />
   </section>
</Layout>
